// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// */

// import React, { useRef } from 'react'
// import { useGLTF } from '@react-three/drei'


// export function Model(props) {
//   const { nodes, materials } = useGLTF('models/classroomwithteacher.glb')
//   return (
//     <group {...props} dispose={null}>
//       <primitive object={nodes.Hips} />
//       <skinnedMesh
//         name="EyeLeft"
//         geometry={nodes.EyeLeft.geometry}
//         material={materials.Wolf3D_Eye}
//         skeleton={nodes.EyeLeft.skeleton}
//         morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
//         morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
//       />
//       <skinnedMesh
//         name="EyeRight"
//         geometry={nodes.EyeRight.geometry}
//         material={materials.Wolf3D_Eye}
//         skeleton={nodes.EyeRight.skeleton}
//         morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
//         morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
//       />
//       <skinnedMesh
//         name="Wolf3D_Head"
//         geometry={nodes.Wolf3D_Head.geometry}
//         material={materials.Wolf3D_Skin}
//         skeleton={nodes.Wolf3D_Head.skeleton}
//         morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
//         morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
//       />
//       <skinnedMesh
//         name="Wolf3D_Teeth"
//         geometry={nodes.Wolf3D_Teeth.geometry}
//         material={materials.Wolf3D_Teeth}
//         skeleton={nodes.Wolf3D_Teeth.skeleton}
//         morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
//         morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
//       />
//       <skinnedMesh
//         geometry={nodes.Wolf3D_Hair.geometry}
//         material={materials.Wolf3D_Hair}
//         skeleton={nodes.Wolf3D_Hair.skeleton}
//       />
//       <skinnedMesh
//         geometry={nodes.Wolf3D_Glasses.geometry}
//         material={materials.Wolf3D_Glasses}
//         skeleton={nodes.Wolf3D_Glasses.skeleton}
//       />
//       <skinnedMesh
//         geometry={nodes.Wolf3D_Body.geometry}
//         material={materials.Wolf3D_Body}
//         skeleton={nodes.Wolf3D_Body.skeleton}
//       />
//       <skinnedMesh
//         geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
//         material={materials.Wolf3D_Outfit_Bottom}
//         skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
//       />
//       <skinnedMesh
//         geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
//         material={materials.Wolf3D_Outfit_Footwear}
//         skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
//       />
//       <skinnedMesh
//         geometry={nodes.Wolf3D_Outfit_Top.geometry}
//         material={materials.Wolf3D_Outfit_Top}
//         skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_4.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_6.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_8.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_10.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_12.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_14.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_16.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_18.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_19.geometry}
//         material={materials.metalic_mat}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_21.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_23.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_25.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_26.geometry}
//         material={materials.emissionwhite}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_28.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_29.geometry}
//         material={materials.metalic_mat}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_31.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_33.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_34.geometry}
//         material={materials.metalic_mat}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_36.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_38.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_40.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_42.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_44.geometry}
//         material={materials.metalic_mat}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_45.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_47.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_48.geometry}
//         material={materials.metalic_mat}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_50.geometry}
//         material={materials.normal_}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Object_52.geometry}
//         material={materials.normal_}
//       />
//     </group>
//   )
// }

// useGLTF.preload('models/classroomwithteacher.glb')

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { TextureLoader } from "three";
import { useLoader } from "@react-three/fiber";
import { useChat } from "../hooks/useChat";

// Facial expressions for the avatar
const facialExpressions = {
  default: {},
  smile: {
    viseme_PP: 0.84,
    viseme_FF: 0.37,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
};

// Mapping of visemes to morph targets
const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

export function Model(props) {
  const { nodes, materials, scene } = useGLTF("/models/classroomwithteacher.glb");
  const { message, onMessagePlayed, chat } = useChat();

  const [lipsync, setLipsync] = useState(null);
  const [audio, setAudio] = useState(null);
  const [facialExpression, setFacialExpression] = useState("default");

  const imageTexture = useLoader(TextureLoader, "/public/images/image3.jpg", (loader) => {
    loader.manager.onError = (url) => {
      console.error(`Could not load ${url}`);
    };
  });
  console.log("Image Texture:", imageTexture);


  const boardMaterial = new THREE.MeshBasicMaterial({
    map: imageTexture, // Apply the image texture
    side: THREE.DoubleSide, // Ensure the texture is visible from both sides
  });

  // useEffect(() => {
  //   if (nodes.Object_4 && nodes.Object_4.material) {
  //     // Assuming the board uses a material that can be updated
  //     nodes.Object_4.material.map = imageTexture;
  //     nodes.Object_4.material.needsUpdate = true; // Ensure the material updates
  //   }
  // }, [imageTexture, nodes.Object_4]);


  console.log("Board UVs:", nodes.Object_4.geometry.attributes.uv);

  // Load animations
  const { animations } = useGLTF("/models/animations2.glb");
  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "BreathingIdle") ? "BreathingIdle" : animations[0].name
  );

  // Handle incoming messages
  useEffect(() => {
    if (!message) {
      setAnimation("BreathingIdle");
      return;
    }
  
    // Set animation, facial expression, and lip-sync data
    setAnimation(message.animation || "BreathingIdle");
    setFacialExpression(message.facialExpression || "default");
    setLipsync(message.lipsync);
  
    // Play the audio
    const audio = new Audio(message.audio);
    audio.play();
    setAudio(audio);
  
    // Callback when audio ends
    audio.onended = onMessagePlayed;
  }, [message]);

  // Update morph targets for facial expressions and lip-sync
  // Avatar.jsx
useFrame(() => {
  if (!setupMode) {
    // Apply facial expressions
    Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
      const mapping = facialExpressions[facialExpression];
      if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") return; // Handle blinks separately
      if (mapping && mapping[key]) {
        lerpMorphTarget(key, mapping[key], 0.1);
      } else {
        lerpMorphTarget(key, 0, 0.1);
      }
    });

    // Apply lip-sync
    if (message && lipsync) {
      const currentAudioTime = audio.currentTime;
      const appliedMorphTargets = [];

      lipsync.mouthCues.forEach((mouthCue) => {
        if (currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end) {
          appliedMorphTargets.push(corresponding[mouthCue.value]);
          lerpMorphTarget(corresponding[mouthCue.value], 1, 0.2);
        }
      });

      // Reset unused morph targets
      Object.values(corresponding).forEach((value) => {
        if (!appliedMorphTargets.includes(value)) {
          lerpMorphTarget(value, 0, 0.1);
        }
      });
    }
  }
});

  // Helper function to lerp morph targets
  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (index === undefined || child.morphTargetInfluences[index] === undefined) return;
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );
      }
    });
  };

  // Blinking animation
  const [blink, setBlink] = useState(false);
  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} 
      />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Hair"
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
 <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_4.geometry}
        material={boardMaterial} // Use the new material
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_6.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_8.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_10.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_12.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_14.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_16.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_18.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_19.geometry}
        material={materials.metalic_mat}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_21.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_23.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_25.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_26.geometry}
        material={materials.emissionwhite}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_28.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_29.geometry}
        material={materials.metalic_mat}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_31.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_33.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_34.geometry}
        material={materials.metalic_mat}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_36.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_38.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_40.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_42.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_44.geometry}
        material={materials.metalic_mat}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_45.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_47.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_48.geometry}
        material={materials.metalic_mat}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_50.geometry}
        material={materials.normal_}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_52.geometry}
        material={materials.normal_}
      />
      
    </group>
  );
}

useGLTF.preload("/models/classroomwithteacher.glb");
useGLTF.preload("/models/animations2.glb");